version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: loopin-postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: meta_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    container_name: loopin-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: meta_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:latest
    container_name: loopin-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redpanda-0:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: loopin-redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    volumes:
      - redpanda_data:/var/lib/redpanda/data

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_HTTP_AUTH_ENABLED=false
      - INFLUXDB_DB=k6

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./grafana:/etc/grafana/provisioning/

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  redpanda_data:



# prod

#version: '3.8'
#services:
#  redis:
#    image: redis:latest
#    container_name: loopin-redis
#    volumes:
#      - redis-data:/data
#    command: >
#      redis-server --appendonly yes
#                   --bind 0.0.0.0
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]
#      interval: 5s
#      timeout: 3s
#      retries: 5
#      start_period: 3s
#    networks:
#      - loopin-backend
#
#  mongodb:
#    image: mongo:latest
#    container_name: loopin-mongodb
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: loopinAdmin
#      MONGO_INITDB_ROOT_PASSWORD: loopinAdmin0906
#      MONGO_INITDB_DATABASE: meta_db
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
#    networks:
#      - loopin-backend
#
#  postgres:
#    image: ankane/pgvector:latest
#    container_name: loopin-postgres
#    restart: always
#    environment:
#      POSTGRES_USER: loopinAdmin
#      POSTGRES_PASSWORD: loopinAdmin0906
#      POSTGRES_DB: meta_db
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres-data:/var/lib/postgresql/data
#    networks:
#      - loopin-backend
#
#  redpanda:
#    image: docker.redpanda.com/redpandadata/redpanda:latest
#    container_name: loopin-redpanda
#    restart: unless-stopped
#    command:
#      - redpanda
#      - start
#      - --mode
#      - dev-container
#      - --smp
#      - "1"
#      - --memory
#      - 256M
#      - --reserve-memory
#      - 128M
#      - --default-log-level=warn
#      - --kafka-addr
#      - PLAINTEXT://0.0.0.0:9092
#      - --advertise-kafka-addr
#      - PLAINTEXT://loopin-redpanda:9092
#      - --pandaproxy-addr
#      - 0.0.0.0:8082
#      - --advertise-pandaproxy-addr
#      - loopin-redpanda:8082
#      - --schema-registry-addr
#      - 0.0.0.0:8081
#      - --rpc-addr
#      - 0.0.0.0:33145
#      - --advertise-rpc-addr
#      - loopin-redpanda:33145
#    ports:
#      - "9092:9092"     # Kafka API
#      - "8081:8081"     # Schema Registry
#      - "8082:8082"     # PandaProxy
#      - "9644:9644"     # Admin API
#    volumes:
#      - redpanda_data:/var/lib/redpanda/data
#    networks:
#      - loopin-backend
#
#  app:
#    image: junhui9789/loopin-app:latest
#    container_name: loopin-app
#    ports:
#      - "8080:8080"
#    env_file:
#      - ./app/.env
#    environment:
#      - SPRING_PROFILES_ACTIVE=prod
#      - DOTENV_PATH=/app
#    volumes:
#      - ./app/.env:/app/.env
#      - ./app/fcm-private-key.json:/app/fcm-private-key.json
#    depends_on:
#      redis:
#        condition: service_healthy  # Redis가 정상 작동할 때까지 대기
#      postgres:
#        condition: service_started  # Postgres가 정상 작동할 때까지 대기
#    networks:
#      - loopin-backend
#      - loopin-proxy
#
#  nginx-proxy-manager:
#    image: 'jc21/nginx-proxy-manager:latest'
#    container_name: loopin-npm
#    restart: unless-stopped
#    ports:
#      - '80:80'    # HTTP 포트
#      - '443:443'  # HTTPS 포트
#      - '81:81'    # 관리자 웹 인터페이스 포트
#    volumes:
#      - ./data:/data
#      - ./letsencrypt:/etc/letsencrypt
#    networks:
#      - loopin-proxy
#
#  influxdb:
#    image: influxdb:1.8
#    ports:
#      - "8086:8086"
#    environment:
#      - INFLUXDB_HTTP_AUTH_ENABLED=false
#      - INFLUXDB_DB=k6
#    networks:
#      - loopin-monitor
#
#  grafana:
#    image: grafana/grafana:latest
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_BASIC_ENABLED=false
#    volumes:
#      - ./grafana/provisioning:/etc/grafana/provisioning
#      - grafana-storage:/var/lib/grafana
#    networks:
#      - loopin-monitor
#
#volumes:
#  redis-data:
#  redpanda-data:
#  postgres-data:
#  grafana-storage:
#
#networks:
#  loopin-backend:
#    driver: bridge
#  loopin-proxy:
#    driver: bridge
#  loopin-monitor:
#    driver: bridge
